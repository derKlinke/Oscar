name: Build and Package macOS App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.3"

      - name: Decode and install certificate
        run: |
          echo "${{ secrets.CERTIFICATE_BASE64 }}" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P ${{ secrets.P12_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security list-keychains -s build.keychain

      - name: Install dependencies
        run: |
          brew install create-dmg

      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: build
          key: ${{ runner.os }}-derived-data

      - name: Build the SwiftUI app with code signing
        run: |
          xcodebuild -scheme Oscar -project Oscar.xcodeproj -configuration Release build CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGN_IDENTITY }}" PROVISIONING_PROFILE="${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}" -derivedDataPath build

      - name: Cache Derived Data
        uses: actions/cache/save@v4
        with:
          path: build
          key: ${{ runner.os }}-derived-data

      - name: Package the app into a DMG
        run: |
          bash scripts/package-dmg.sh

      - name: ZIP .app archive
        run: |
          cd build/Build/Products/Release
          zip -r Oscar.app.zip Oscar.app

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Oscar-dmg
          path: |
            oscar-installer.dmg
            build/Build/Products/Release/Oscar.app.zip

  release:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Dependencies
        run: |
          brew install --cask macfuse
          brew install gromgit/fuse/s3fs-mac

      - name: Download app artifact
        uses: actions/download-artifact@v3
        with:
          name: Oscar-app

      - name: Unzip the app artifact
        run: |
          unzip Oscar.app.zip
          ls -la

      - name: Retrieve version from the app
        id: version
        run: |
          VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" Oscar.app/Contents/Info.plist)
          echo "Version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Downloaded latest Sparkle release
        run: |
          curl -L https://github.com/sparkle-project/Sparkle/releases/download/2.6.3/Sparkle-2.6.3.tar.xz
          tar -xf Sparkle-2.6.3.tar.xz

      - name: Upload the app to S3 and generate appcast
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo ${{ secrets.ACCESS_KEY_ID }}:${{ secrets.SECRET_ACCESS_KEY }} > ${HOME}/.passwd-s3fs
          chmod 600 ${HOME}/.passwd-s3fs
          ls -la
          s3fs ${{ secrets.S3_BUCKET }} /Volumes/s3fs -o url=https://${{ secrets.S3_ENDPOINT }} -o use_path_request_style -o passwd_file=${HOME}/.passwd-s3fs
          cp -r Oscar.app /Volumes/s3fs/apps/oscar/Oscar-$VERSION.dmg
          ./Sparkle-2.6.3/bin/generate_appcast /Volumes/s3fs/apps/oscar > /Volumes/s3fs/apps/oscar/appcast.xml
          umount /Volumes/s3fs
